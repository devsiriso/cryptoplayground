{"version":3,"sources":["Util.js","components/CoinList.jsx","components/Logo.jsx","components/Header.jsx","components/BuyModal.jsx","components/MarketList.jsx","components/Market.jsx","components/Money.jsx","components/MoneyButton.jsx","components/SellButton.jsx","components/Copyright.jsx","components/SocialMediaLinks.jsx","components/NomicsCredit.jsx","components/Footer.jsx","components/Main.jsx","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["roundToTwo","num","Math","round","pow","toFixed","CoinList","props","useDisclosure","isOpen","onOpen","onClose","useState","currentCoin","setCurrentCoin","amount","setAmount","flexDirection","width","justifyContent","textAlign","id","defaultValue","min","max","amountOwned","onChange","value","price","leftIcon","NotAllowed","colorScheme","onClick","variant","CheckCircle","sellCoin","minH","wrap","border","borderRadius","align","p","coins","length","map","coin","i","handleSell","boxSize","src","logo_url","marginLeft","color","Logo","svg","useColorModeValue","viewBox","fill","h","flexShrink","d","Header","justify","height","direction","spacing","size","BuyModal","showModalButtonText","money","purchaseCoin","spawnToast","floor","name","allowMouseWheel","clampValueOnBlur","keepWithinRange","MarketList","marketCoins","getColor","maxHeight","style","overflowY","overflowX","overflowInline","m","fontSize","price_change_pct","price_change","Market","URL","process","setMarketCoins","setError","setIsLoaded","Date","toUTCString","setLastFetch","fetchCoins","a","fetch","mode","then","res","json","result","console","log","error","useEffect","change","Money","MoneyButton","Add","addMoney","SellButton","calculatePortfolioValue","rightIcon","sellAllCoins","Moon","Copyright","getFullYear","SocialMediaLinks","as","href","icon","NomicsCredit","borderBottom","display","Footer","role","mx","maxW","py","px","base","md","alignSelf","sm","Main","setMoney","setCoins","forEach","element","canAfford","toast","useToast","description","status","position","duration","some","e","temp","findIndex","Number","prevState","index","splice","moneyEarned","App","theme","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3fe8fdab.chunk.js","sourcesContent":["export function roundToTwo(num) {    \r\n    return (Math.round(num*Math.pow(10,2))/Math.pow(10,2)).toFixed(2);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {\r\n  Flex,\r\n  Image,\r\n  Text,\r\n  Modal,\r\n  ModalBody,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  HStack,\r\n  useDisclosure,\r\n  Button,\r\n  NumberInput,\r\n  NumberInputField,\r\n  NumberInputStepper,\r\n  NumberIncrementStepper,\r\n  NumberDecrementStepper,\r\n  VStack,\r\n} from '@chakra-ui/react';\r\nimport { RepeatIcon, NotAllowedIcon, CheckCircleIcon } from '@chakra-ui/icons';\r\nimport React, { useState } from 'react';\r\nimport { roundToTwo } from '../Util';\r\n\r\nexport const CoinList = props => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [currentCoin, setCurrentCoin] = useState({});\r\n  const [amount, setAmount] = useState(0);\r\n  const handleSell = coin => {\r\n    setCurrentCoin(coin);\r\n    onOpen();\r\n  };\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\" width=\"100%\" justifyContent=\"space-around\">\r\n      <Modal isOpen={isOpen} onClose={onClose}  >\r\n        <ModalOverlay />\r\n        <ModalContent >\r\n          <ModalHeader textAlign=\"center\">\r\n            Selling: {currentCoin.id}\r\n          </ModalHeader>\r\n          <ModalBody textAlign=\"center\">\r\n            <VStack>\r\n              <Text>How much {currentCoin.id} would you like to sell?</Text>\r\n              <NumberInput\r\n                defaultValue={1}\r\n                min={1}\r\n                max={currentCoin.amountOwned}\r\n                onChange={value => setAmount(value)}\r\n                value={amount}\r\n              >\r\n                <NumberInputField />\r\n                <NumberInputStepper>\r\n                  <NumberIncrementStepper />\r\n                  <NumberDecrementStepper />\r\n                </NumberInputStepper>\r\n              </NumberInput>\r\n              <Text>\r\n                Total price: ${roundToTwo(amount * currentCoin.price)}\r\n              </Text>\r\n            </VStack>\r\n          </ModalBody>\r\n\r\n          <ModalFooter justifyContent=\"center\">\r\n            <HStack>\r\n              <Button\r\n                leftIcon={<NotAllowedIcon />}\r\n                colorScheme=\"red\"\r\n                onClick={() => {onClose(); setAmount(0)}}\r\n                variant=\"outline\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                leftIcon={<CheckCircleIcon />}\r\n                colorScheme=\"purple\"\r\n                variant=\"outline\"\r\n                onClick={() => {\r\n                  props.sellCoin(currentCoin, amount);\r\n                  onClose();\r\n                  setAmount(0);\r\n                }}\r\n              >\r\n                Sell\r\n              </Button>\r\n            </HStack>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n      <Flex\r\n        minH={50}\r\n        wrap=\"wrap\"\r\n        border=\"1px solid #303b52\"\r\n        borderRadius={5}\r\n        justifyContent=\"space-around\"\r\n        align=\"center\"\r\n        p={2}\r\n      >\r\n        {props.coins.length ? (\r\n          props.coins.map((coin, i) => (\r\n            <Flex key={coin.id} onClick={() => handleSell(coin)}>\r\n              <Image boxSize={30} src={coin.logo_url} />\r\n              <Text marginLeft={2}>{coin.amountOwned}</Text>\r\n            </Flex>\r\n          ))\r\n        ) : (\r\n          <Text color=\"#303b52\">Your coins will appear here.</Text>\r\n        )}\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n","import { chakra, useColorModeValue } from '@chakra-ui/react'\r\nimport * as React from 'react'\r\n\r\nexport const Logo = (props) => {\r\n  return (\r\n    <chakra.svg\r\n      color={useColorModeValue('blue.500', 'blue.300')}\r\n      aria-hidden\r\n      viewBox=\"0 0 27 24\"\r\n      fill=\"none\"\r\n      h=\"6\"\r\n      flexShrink={0}\r\n      {...props}\r\n    >\r\n      <path\r\n        d=\"M25 23ZL25 24M13 24A1 1 0 0012 0A1 1 0 0013 24M27 0 27 24 0 12\"\r\n        fill=\"currentColor\"\r\n      />\r\n    </chakra.svg>\r\n  )\r\n}\r\n","import { Flex, Heading, Stack } from \"@chakra-ui/react\";\r\nimport React from 'react';\r\nimport { ColorModeSwitcher } from '../ColorModeSwitcher';\r\nimport { Logo } from './Logo';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <Flex justify=\"center\" height=\"10%\">\r\n            {/* <Heading size=\"md\">CryptoPlayground</Heading> */}\r\n            {/* <Logo /> */}\r\n            {/* <ColorModeSwitcher/> */}\r\n\r\n            <Stack direction=\"row\" spacing=\"4\" align=\"center\" justify=\"space-between\">\r\n\r\n          <Logo />\r\n          <Heading size=\"lg\" >CryptoPlayground</Heading>\r\n   \r\n        </Stack>\r\n        </Flex>\r\n    )\r\n}\r\n\r\n","import { CheckCircleIcon, NotAllowedIcon } from '@chakra-ui/icons';\r\nimport {\r\n  Button,\r\n  HStack,\r\n  Modal,\r\n  ModalBody,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  NumberDecrementStepper,\r\n  NumberIncrementStepper,\r\n  NumberInput,\r\n  NumberInputField,\r\n  NumberInputStepper,\r\n  Text,\r\n  useDisclosure,\r\n  VStack,\r\n} from '@chakra-ui/react';\r\nimport React, { useState } from 'react';\r\nimport { roundToTwo } from '../Util';\r\nexport const BuyModal = ({\r\n  showModalButtonText,\r\n  coin,\r\n  money,\r\n  purchaseCoin,\r\n  spawnToast,\r\n}) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [amount, setAmount] = useState(0);\r\n  const max = Math.floor(money / coin.price);\r\n\r\n  const onChange = value => {\r\n    if (value > max) return;\r\n    setAmount(value);\r\n  };\r\n\r\n  const onClick = () => {\r\n    if (coin.price > money) {\r\n      spawnToast(`You do not have enough funds to acquire ${coin.name}`, 'error');\r\n    } else {\r\n      onOpen();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button colorScheme=\"green\" variant=\"outline\" onClick={onClick}>\r\n        {showModalButtonText}\r\n      </Button>\r\n      <Modal isOpen={isOpen} onClose={onClose} size=\"xs\">\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader textAlign=\"center\">Buying: {coin.id}</ModalHeader>\r\n          <ModalBody textAlign=\"center\">\r\n            <VStack>\r\n              <Text>How much {coin.id} would you like to purchase?</Text>\r\n              <Text>Maximum you can afford: {max}</Text>\r\n              <NumberInput\r\n                defaultValue={1}\r\n                min={1}\r\n                max={money / coin.price}\r\n                onChange={onChange}\r\n                value={amount}\r\n                allowMouseWheel\r\n                clampValueOnBlur\r\n                keepWithinRange\r\n              >\r\n                <NumberInputField />\r\n                <NumberInputStepper>\r\n                  <NumberIncrementStepper />\r\n                  <NumberDecrementStepper />\r\n                </NumberInputStepper>\r\n              </NumberInput>\r\n              <Text>\r\n                Total price: <b>${roundToTwo(amount * coin.price)}</b>\r\n              </Text>\r\n            </VStack>\r\n          </ModalBody>\r\n\r\n          <ModalFooter justifyContent=\"center\">\r\n            <HStack>\r\n              <Button\r\n                leftIcon={<NotAllowedIcon />}\r\n                colorScheme=\"red\"\r\n                onClick={() => {\r\n                  onClose();\r\n                  setAmount(0);\r\n                }}\r\n                variant=\"outline\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                leftIcon={<CheckCircleIcon />}\r\n                colorScheme=\"purple\"\r\n                variant=\"outline\"\r\n                onClick={() => {\r\n                  purchaseCoin(coin, amount);\r\n                  onClose();\r\n                  setAmount(0);\r\n                }}\r\n              >\r\n                Buy\r\n              </Button>\r\n            </HStack>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","import {\r\n  Divider,\r\n  Flex,\r\n  HStack,\r\n  Image,\r\n  List,\r\n  Text,\r\n  Heading,\r\n  Container,\r\n} from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { roundToTwo } from '../Util';\r\nimport { BuyModal } from './BuyModal';\r\n\r\nexport const MarketList = ({\r\n  marketCoins,\r\n  getColor,\r\n  purchaseCoin,\r\n  money,\r\n  spawnToast,\r\n}) => {\r\n  return (\r\n    <List\r\n        width=\"100%\"\r\n        maxHeight=\"50vh\"\r\n        style={{\r\n          overflowY: 'auto',\r\n          overflowX: 'hidden',\r\n          overflowInline: 'hidden',\r\n        }}\r\n      >\r\n          <Divider m={2} />\r\n        {marketCoins &&\r\n          marketCoins.map((coin, i) => (\r\n            <Flex direction=\"column\">\r\n              <Flex key={coin.id} justifyContent=\"space-between\">\r\n                <HStack>\r\n                  <Image src={coin.logo_url} boxSize=\"30px\" />\r\n                  <Flex direction=\"column\" style={{ textAlign: 'left' }}>\r\n                    <Text>{coin.id}</Text>\r\n                    <Text fontSize=\"sm\">{coin.name}</Text>\r\n                  </Flex>\r\n                </HStack>\r\n\r\n                <HStack>\r\n                  <Flex direction=\"column\" style={{ textAlign: 'right' }}>\r\n                    <Text>${roundToTwo(coin.price)}</Text>\r\n                    <Text\r\n                      fontSize=\"sm\"\r\n                      color={getColor(coin['1d'].price_change_pct)}\r\n                    >\r\n                      {roundToTwo(coin['1d'].price_change)} ({roundToTwo(coin['1d'].price_change_pct)}%)\r\n                    </Text>\r\n                  </Flex>\r\n                  <BuyModal\r\n                    showModalButtonText=\"+\"\r\n                    coin={coin}\r\n                    money={money}\r\n                    purchaseCoin={purchaseCoin}\r\n                    spawnToast={spawnToast}\r\n                  />\r\n                </HStack>\r\n              </Flex>\r\n              <Divider m={2} />\r\n            </Flex>\r\n          ))}\r\n      </List>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Spacer,\r\n  Divider,\r\n  Flex,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  TableCaption,\r\n  IconButton,\r\n  Modal,\r\n  ModalBody,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  HStack,\r\n  useDisclosure,\r\n  Button,\r\n  NumberInput,\r\n  NumberInputField,\r\n  NumberInputStepper,\r\n  NumberIncrementStepper,\r\n  NumberDecrementStepper,\r\n  VStack,\r\n  Text,\r\n  List,\r\n  ListItem,\r\n  Box,\r\n} from '@chakra-ui/react';\r\nimport { RepeatIcon, NotAllowedIcon, CheckCircleIcon } from '@chakra-ui/icons';\r\nimport { Image } from '@chakra-ui/react';\r\nimport { roundToTwo } from '../Util';\r\nimport { getMarketCoins } from '../services/ApiService';\r\nimport { BuyModal } from './BuyModal';\r\nimport { MarketList } from './MarketList';\r\n// DECENT LOOKING COINS: BTC,TRX,TEL,BNB,ETC,USDP:\r\n\r\nexport const Market = ({purchaseCoin, money, spawnToast}) => {\r\n  const COINS_TO_FETCH = 'BTC, ETH, BNB, USDP,BTC,TRX,TEL,BNB,ETC,USDP,DOGE,ADA,SOL,USDT,BCH';\r\n  const API_KEY = process.env.REACT_APP_API_KEY;\r\n  const URL = `https://api.nomics.com/v1/currencies/ticker?key=${API_KEY}&ids=${COINS_TO_FETCH}&interval=1d,30d&per-page=100&page=1`;\r\n\r\n  const [marketCoins, setMarketCoins] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [lastFetch, setLastFetch] = useState(new Date().toUTCString());\r\n\r\n  const fetchCoins = async () => {\r\n    fetch(URL, { mode: 'cors' })\r\n      .then(res => res.json())\r\n      .then(\r\n        result => {\r\n          setIsLoaded(true);\r\n          setLastFetch(new Date().toUTCString());\r\n          console.log(result);\r\n          setMarketCoins(result);\r\n        },\r\n        error => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      );\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCoins();\r\n    // setMarketCoins(getMarketCoins());\r\n  }, []);\r\n\r\n  const getColor = change => {\r\n    if (change < 0) return 'red.400';\r\n    if (change > 0) return 'green.400';\r\n  };\r\n\r\n  return (\r\n    <MarketList\r\n    marketCoins={marketCoins}\r\n    getColor={getColor}\r\n    purchaseCoin={purchaseCoin}\r\n    money={money}\r\n    spawnToast={spawnToast}\r\n  ></MarketList>\r\n  );\r\n};\r\n","import { Text } from \"@chakra-ui/layout\"\r\nimport { roundToTwo } from \"../Util\"\r\n\r\nexport const Money = props => {\r\n    return (<Text>You have: ${roundToTwo(props.money)}</Text>)\r\n}","import { Box, Button, useBreakpointValue } from '@chakra-ui/react';\r\nimport { AddIcon } from '@chakra-ui/icons';\r\n\r\nexport const MoneyButton = props => {\r\n\r\n\r\n  return (\r\n    <Box>\r\n      <Button\r\n        variant=\"solid\"\r\n        leftIcon={<AddIcon />}\r\n        colorScheme=\"teal\"  \r\n        width={props.width}    \r\n        onClick={() => props.addMoney()}\r\n      >\r\n        ADD SOME MONEY!\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n","import { MoonIcon, NotAllowedIcon } from '@chakra-ui/icons';\r\nimport {\r\n    Box, Button, HStack, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, useDisclosure\r\n} from '@chakra-ui/react';\r\nimport { roundToTwo } from '../Util';\r\n\r\nexport const SellButton = (props) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  \r\n  const handleLaunch = () => {\r\n    props.sellAllCoins();\r\n    onClose();\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Modal isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader textAlign=\"center\">Are you sure you want to go to the moon?</ModalHeader>\r\n\r\n          <ModalBody textAlign=\"center\">\r\n            This will sell all your coins for the current market price.\r\n            You will earn: <b>${roundToTwo(props.calculatePortfolioValue())}</b>\r\n          </ModalBody>\r\n\r\n          <ModalFooter justifyContent=\"center\">\r\n            <HStack>\r\n              <Button leftIcon={<NotAllowedIcon />} rightIcon={<NotAllowedIcon />} colorScheme=\"red\" onClick={onClose}>\r\n                ABORT MISSION\r\n              </Button>\r\n              <Button colorScheme=\"purple\" onClick={() => handleLaunch()} >🚀 LAUNCH 🚀</Button>\r\n            </HStack>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n      <Button\r\n        variant=\"solid\"\r\n        leftIcon={<MoonIcon />}\r\n        width={props.width}\r\n        colorScheme=\"purple\"\r\n        onClick={onOpen}\r\n      >\r\n        GO TO THE MOON\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n","import { Text } from '@chakra-ui/layout'\r\nimport * as React from 'react'\r\n\r\nexport const Copyright = (props) => (\r\n  <Text fontSize=\"sm\" {...props} color=\"grey\">\r\n    &copy; {new Date().getFullYear()} CryptoPlayground Inc. No rights reserved.\r\n  </Text>\r\n)\r\n","import { ButtonGroup, IconButton } from '@chakra-ui/react'\r\nimport * as React from 'react'\r\nimport { FaGithub, FaLinkedin } from 'react-icons/fa'\r\n\r\nconst LINKEDIN_URL = \"https://www.linkedin.com/in/svschaik/\";\r\nconst GITHUB_URL = \"https://github.com/devsiriso/\"\r\n\r\nexport const SocialMediaLinks = (props) => (\r\n    <ButtonGroup variant=\"ghost\" color=\"gray.600\" {...props}>\r\n        <IconButton as=\"a\" href={LINKEDIN_URL} aria-label=\"LinkedIn\" icon={<FaLinkedin fontSize=\"20px\" />} />\r\n        <IconButton as=\"a\" href={GITHUB_URL} aria-label=\"GitHub\" icon={<FaGithub fontSize=\"20px\" />} />\r\n    </ButtonGroup>\r\n)\r\n","import { Link, Box, Text } from '@chakra-ui/react';\r\n\r\nexport const NomicsCredit = () => {\r\n  return (\r\n    <Link href=\"https://nomics.com/\" fontSize=\"xs\">\r\n      <Text borderBottom=\"1px solid purple\" display=\"inline-block\">\r\n        Crypto Market Cap & Pricing Data Provided by Nomics\r\n      </Text>\r\n    </Link>\r\n  );\r\n};\r\n","import { Box, Heading, Stack } from '@chakra-ui/react'\r\nimport React from \"react\"\r\nimport { Copyright } from './Copyright'\r\nimport { Logo } from './Logo'\r\nimport { SocialMediaLinks } from './SocialMediaLinks'\r\nimport { NomicsCredit } from './NomicsCredit'\r\n\r\nexport const Footer = () => {\r\n  return (\r\n    <Box\r\n      as=\"footer\"\r\n      role=\"contentinfo\"\r\n      mx=\"auto\"\r\n      maxW=\"7xl\"\r\n      maxHeight=\"100px\" // \r\n      py=\"12\"\r\n      px={{\r\n        base: '4',\r\n        md: '8',\r\n      }}\r\n    >\r\n      <Stack>\r\n        <Stack direction=\"row\" spacing=\"4\" align=\"center\" justify=\"space-between\">\r\n\r\n          <Logo />\r\n          <Heading size=\"md\">CryptoPlayground</Heading>\r\n          <SocialMediaLinks />\r\n        </Stack>\r\n\r\n        <Copyright\r\n          alignSelf={{\r\n            base: 'center',\r\n            sm: 'start',\r\n          }}\r\n        />\r\n            <NomicsCredit/>\r\n      </Stack>\r\n    </Box>\r\n  )\r\n}","import { Grid, useToast, VStack, Heading } from '@chakra-ui/react';\r\nimport React, { useState } from 'react';\r\nimport { roundToTwo } from '../Util';\r\nimport { CoinList } from './CoinList';\r\nimport { Header } from './Header';\r\nimport { Market } from './Market';\r\nimport { Money } from './Money';\r\nimport { MoneyButton } from './MoneyButton';\r\nimport { SellButton } from './SellButton';\r\nimport { Footer } from './Footer';\r\n\r\nexport const Main = () => {\r\n  const [money, setMoney] = useState(1000);\r\n  const [coins, setCoins] = useState([]);\r\n\r\n  const purchaseCoin = (coin, amount) => {\r\n    if (canAfford(coin, amount)) {\r\n      if (coins.some(e => e.id === coin.id)) {\r\n        let temp = [...coins];\r\n        let index = coins.findIndex(e => e.id === coin.id);\r\n        temp[index].amountOwned += Number(amount);\r\n        setCoins(temp);\r\n      } else {\r\n        coin.amountOwned = Number(amount);\r\n        setCoins(prevState => [...prevState, coin]);\r\n      }\r\n      setMoney(money - Number(coin.price * amount));\r\n      spawnToast(\r\n        `You successfully acquired ${amount} ${coin.id} for $${roundToTwo(\r\n          coin.price * amount\r\n        )}`\r\n      );\r\n    } else {\r\n      spawnToast(\r\n        `You cannot afford to buy ${amount} ${coin.id} due to lack of funds.`,\r\n        'error'\r\n      );\r\n    }\r\n  };\r\n\r\n  const sellCoin = (coin, amount) => {\r\n    let temp = [...coins];\r\n    let index = temp.findIndex(e => e.id === coin.id);\r\n    temp[index].amountOwned = temp[index].amountOwned - amount;\r\n    if (temp[index].amountOwned === 0) temp.splice(index, 1);\r\n    setCoins(temp);\r\n    setMoney(money + Number(coin.price * amount)); // TODO: Fetch new price\r\n    spawnToast(\r\n      `You successfully sold your ${amount} ${coin.id} for $${roundToTwo(\r\n        coin.price * amount\r\n      )}`\r\n    );\r\n  };\r\n\r\n  const sellAllCoins = () => {\r\n    let moneyEarned = calculatePortfolioValue();\r\n    spawnToast(\r\n      `You've launched off to the moon! Earning you $${roundToTwo(\r\n        moneyEarned\r\n      )}!`,\r\n      'success'\r\n    );\r\n    setCoins([]);\r\n    setMoney(money + moneyEarned);\r\n  };\r\n\r\n  const calculatePortfolioValue = () => {\r\n    let value = 0;\r\n    coins.forEach(element => {\r\n      value += element.amountOwned * element.price;\r\n    });\r\n\r\n    return value;\r\n  };\r\n\r\n  const addMoney = () => {\r\n    spawnToast(\r\n      \"YOU'RE BLOODY RICH MATE, WHAT ARE YA GONNA DO WITH ALL THOSE DOLLARYDOOS?\",\r\n      'warning'\r\n    );\r\n    setMoney(money + 100);\r\n  };\r\n\r\n  const canAfford = (coin, amount) => {\r\n    return money > coin.price * amount;\r\n  };\r\n\r\n  const toast = useToast();\r\n  const spawnToast = (description, status, position) => {\r\n    toast({\r\n      description: description,\r\n      status: status,\r\n      position: position,\r\n      duration: 2000,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Grid p={2}>\r\n      <VStack justifyContent=\"space-between\">\r\n        <Header />\r\n        <Heading size=\"md\" textAlign=\"center\">\r\n          Marketplace\r\n        </Heading>\r\n        <Market\r\n          spawnToast={spawnToast}\r\n          money={money}\r\n          setMoney={setMoney}\r\n          purchaseCoin={purchaseCoin}\r\n        />\r\n        <CoinList spawnToast={spawnToast} coins={coins} sellCoin={sellCoin} />\r\n        <Money money={money} />\r\n        <VStack>\r\n          <MoneyButton addMoney={addMoney} width={350} />\r\n          <SellButton\r\n            sellAllCoins={sellAllCoins}\r\n            width={350}\r\n            calculatePortfolioValue={calculatePortfolioValue}\r\n          />\r\n          \r\n        </VStack>\r\n      </VStack>\r\n      <Footer></Footer>\r\n    </Grid>\r\n  );\r\n};\r\n","import React from 'react';\nimport {\n  ChakraProvider,\n  theme,\n} from '@chakra-ui/react';\n\nimport { Main } from './components/Main';\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme} >\n      <Main/>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}