{"version":3,"sources":["Util.js","components/MarketList.jsx","components/CoinList.jsx","components/Copyright.jsx","components/Logo.jsx","components/SocialMediaLinks.jsx","components/Footer.jsx","ColorModeSwitcher.js","components/Header.jsx","components/Money.jsx","components/MoneyButton.jsx","components/Main.jsx","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["roundToTwo","num","Math","round","pow","toFixed","MarketList","props","URL","process","useState","marketCoins","setMarketCoins","setError","isLoaded","setIsLoaded","Date","toUTCString","lastFetch","setLastFetch","fetchCoins","a","fetch","mode","then","res","json","result","error","useEffect","variant","colorScheme","size","onClick","icon","Repeat","isLoading","isNumeric","map","x","i","purchaseCoin","src","logo_url","boxSize","id","price","CoinList","flexDirection","width","justifyContent","minH","wrap","border","borderRadius","p","coins","length","sellCoin","marginLeft","amountOwned","color","Copyright","fontSize","getFullYear","Logo","svg","useColorModeValue","viewBox","fill","h","flexShrink","d","SocialMediaLinks","as","href","Footer","role","mx","maxW","maxHeight","py","px","base","md","direction","spacing","align","justify","alignSelf","sm","ColorModeSwitcher","toggleColorMode","useColorMode","text","SwitchIcon","FaMoon","FaSun","Header","paddingLeft","paddingRight","Money","money","MoneyButton","leftIcon","Add","addMoney","Main","setMoney","setCoins","canAfford","coin","toast","useToast","spawnToast","description","status","position","duration","textAlign","some","e","temp","findIndex","prevState","Number","index","splice","App","theme","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b730ed79.chunk.js","sourcesContent":["export function roundToTwo(num) {    \r\n    return (Math.round(num*Math.pow(10,2))/Math.pow(10,2)).toFixed(2);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Table,\r\n    Thead,\r\n    Tbody,\r\n    Tr,\r\n    Th,\r\n    Td,\r\n    TableCaption,\r\n    IconButton,\r\n} from \"@chakra-ui/react\"\r\nimport { RepeatIcon } from \"@chakra-ui/icons\"\r\nimport { Image } from \"@chakra-ui/react\"\r\nimport { roundToTwo } from '../Util';\r\n\r\n// DECENT LOOKING COINS: BTC,TRX,TEL,BNB,ETC,USDP: \r\n\r\nexport const MarketList = (props) => {\r\n    const COINS_TO_FETCH = \"BTC, ETH, BNB, ETC, USDP\";\r\n    const API_KEY = process.env.REACT_APP_API_KEY;\r\n    const URL = `https://api.nomics.com/v1/currencies/ticker?key=${API_KEY}&ids=${COINS_TO_FETCH}&interval=1d,30d&per-page=100&page=1`\r\n\r\n    const [marketCoins, setMarketCoins] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [lastFetch, setLastFetch] = useState(new Date().toUTCString());\r\n\r\n    const fetchCoins = async () => {\r\n        fetch(URL, { mode: 'cors' })\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setIsLoaded(true);\r\n                    setLastFetch(new Date().toUTCString());\r\n                    setMarketCoins(result);\r\n                },\r\n                (error) => {\r\n                    setIsLoaded(true);\r\n                    setError(error);\r\n                }\r\n            )\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchCoins();\r\n    }, [])\r\n\r\n    const getColor = (change) => {\r\n        if (change < 0) return \"red.400\";\r\n        if (change > 0) return \"green.400\";\r\n    }\r\n        \r\n    return (\r\n        <Table variant=\"simple\" >\r\n            <TableCaption>Last update: {lastFetch}\r\n            </TableCaption>\r\n            <Thead>\r\n                <Tr>\r\n                    <Th>\r\n                        {isLoaded\r\n                            ? <IconButton\r\n                                variant=\"outline\"\r\n                                colorScheme=\"teal\"\r\n                                size=\"xs\"\r\n                                onClick={() => fetchCoins()}\r\n                                icon={<RepeatIcon />} />\r\n                            : <IconButton\r\n                                isLoading\r\n                                variant=\"outline\"\r\n                                colorScheme=\"teal\"\r\n                                size=\"xs\"\r\n                                onClick={() => fetchCoins()}\r\n                                icon={<RepeatIcon />} />}\r\n                    </Th>\r\n                    <Th>Coin</Th>\r\n                    {/* <Th>Day Δ</Th> */}\r\n                    {/* <Th>Month Δ</Th> */}\r\n                    <Th isNumeric>Price</Th>\r\n                </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n                {/* <Tr onClick={() => addMoney()}><Td>Money</Td><Td isNumeric>0</Td></Tr> */}\r\n                {marketCoins && marketCoins.map((x, i) => (\r\n                    <Tr key={x.id} onClick={() => props.purchaseCoin(x)}>\r\n                        <Td><Image src={x.logo_url} boxSize=\"20px\" /></Td>\r\n                        <Td >{x.id}</Td>\r\n                        {/* <Td color={getColor(x[\"1d\"].price_change_pct)}>{roundToTwo(x[\"1d\"].price_change_pct)}%</Td> */}\r\n                        {/* <Td color={getColor(x[\"30d\"].price_change_pct)}>{roundToTwo(x[\"30d\"].price_change_pct)}%</Td> */}\r\n                        <Td isNumeric>${roundToTwo(x.price)}</Td>\r\n                    </Tr>\r\n                ))}\r\n            </Tbody>\r\n        </Table>\r\n    )\r\n}","import { Flex, Image, Text } from '@chakra-ui/react'\r\nimport React from \"react\"\r\n\r\nexport const CoinList = props => {\r\n    return (\r\n        <Flex flexDirection=\"column\" width=\"100%\" justifyContent=\"space-around\">\r\n            <Flex minH={50}wrap=\"wrap\" border=\"1px solid grey\" borderRadius={5} justifyContent=\"space-around\" p={2}>\r\n                {props.coins.length ? props.coins.map((x, i) => (\r\n                    <Flex key={x.id} onClick={() => props.sellCoin(x)} >\r\n                        <Image boxSize={30} src={x.logo_url} />\r\n                        <Text marginLeft={2}>{x.amountOwned}</Text>\r\n                    </Flex>\r\n                )): <Text color=\"gray\">Your coins will appear here.</Text>}\r\n            </Flex>\r\n        </Flex>\r\n    )\r\n}","import { Text } from '@chakra-ui/layout'\r\nimport * as React from 'react'\r\n\r\nexport const Copyright = (props) => (\r\n  <Text fontSize=\"sm\" {...props} color=\"grey\">\r\n    &copy; {new Date().getFullYear()} CryptoPlayground Inc. No rights reserved.\r\n  </Text>\r\n)\r\n","import { chakra, useColorModeValue } from '@chakra-ui/react'\r\nimport * as React from 'react'\r\n\r\nexport const Logo = (props) => {\r\n  return (\r\n    <chakra.svg\r\n      color={useColorModeValue('blue.500', 'blue.300')}\r\n      aria-hidden\r\n      viewBox=\"0 0 27 24\"\r\n      fill=\"none\"\r\n      h=\"6\"\r\n      flexShrink={0}\r\n      {...props}\r\n    >\r\n      <path\r\n        d=\"M25 23ZL25 24M13 24A1 1 0 0012 0A1 1 0 0013 24M27 0 27 24 0 12\"\r\n        fill=\"currentColor\"\r\n      />\r\n    </chakra.svg>\r\n  )\r\n}\r\n","import { ButtonGroup, IconButton } from '@chakra-ui/react'\r\nimport * as React from 'react'\r\nimport { FaGithub, FaLinkedin } from 'react-icons/fa'\r\n\r\nconst LINKEDIN_URL = \"https://www.linkedin.com/in/svschaik/\";\r\nconst GITHUB_URL = \"https://github.com/devsiriso/\"\r\n\r\nexport const SocialMediaLinks = (props) => (\r\n    <ButtonGroup variant=\"ghost\" color=\"gray.600\" {...props}>\r\n        <IconButton as=\"a\" href={LINKEDIN_URL} aria-label=\"LinkedIn\" icon={<FaLinkedin fontSize=\"20px\" />} />\r\n        <IconButton as=\"a\" href={GITHUB_URL} aria-label=\"GitHub\" icon={<FaGithub fontSize=\"20px\" />} />\r\n    </ButtonGroup>\r\n)\r\n","import { Box, Heading, Stack } from '@chakra-ui/react'\r\nimport React from \"react\"\r\nimport { Copyright } from './Copyright'\r\nimport { Logo } from './Logo'\r\nimport { SocialMediaLinks } from './SocialMediaLinks'\r\n\r\nexport const Footer = () => {\r\n  return (\r\n    <Box\r\n      as=\"footer\"\r\n      role=\"contentinfo\"\r\n      mx=\"auto\"\r\n      maxW=\"7xl\"\r\n      maxHeight=\"100px\" // \r\n      py=\"12\"\r\n      px={{\r\n        base: '4',\r\n        md: '8',\r\n      }}\r\n    >\r\n      <Stack>\r\n        <Stack direction=\"row\" spacing=\"4\" align=\"center\" justify=\"space-between\">\r\n\r\n          <Logo />\r\n          <Heading size=\"md\">CryptoPlayground</Heading>\r\n          <SocialMediaLinks />\r\n        </Stack>\r\n\r\n        <Copyright\r\n          alignSelf={{\r\n            base: 'center',\r\n            sm: 'start',\r\n          }}\r\n        />\r\n      </Stack>\r\n    </Box>\r\n  )\r\n}","import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import { Flex, Heading } from \"@chakra-ui/react\";\r\nimport React from 'react';\r\nimport { ColorModeSwitcher } from '../ColorModeSwitcher';\r\nimport { Logo } from './Logo';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <Flex align=\"center\" justify=\"space-between\" paddingLeft={25} paddingRight={25} maxHeight={50}>\r\n            <Logo />\r\n            <Heading size=\"md\">CryptoPlayground</Heading>\r\n            <ColorModeSwitcher/>\r\n        </Flex>\r\n\r\n    )\r\n}\r\n\r\n","import { Text } from \"@chakra-ui/layout\"\r\nimport { roundToTwo } from \"../Util\"\r\n\r\nexport const Money = props => {\r\n    return (<Text>You have: ${roundToTwo(props.money)}</Text>)\r\n}","import { Box, Button } from '@chakra-ui/react';\r\nimport { AddIcon } from '@chakra-ui/icons';\r\n\r\nexport const MoneyButton = props => {\r\n  return (\r\n    <Box>\r\n      <Button\r\n        variant=\"outline\"\r\n        leftIcon={<AddIcon />}\r\n        colorScheme=\"teal\"\r\n        variant=\"solid\"\r\n        size=\"lg\"\r\n        onClick={() => props.addMoney()}\r\n      >\r\n        ADD SOME MONEY!\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  VStack,\r\n  Grid,\r\n  useToast\r\n} from '@chakra-ui/react';\r\nimport { MarketList } from './MarketList';\r\nimport { CoinList } from './CoinList';\r\nimport { Footer } from './Footer';\r\nimport { Header } from './Header';\r\nimport { roundToTwo } from '../Util';\r\nimport { Money } from './Money';\r\nimport { MoneyButton } from './MoneyButton';\r\n\r\n\r\nexport const Main = () => {\r\n  const [money, setMoney] = useState(1000);\r\n  const [coins, setCoins] = useState([]);\r\n\r\n  const purchaseCoin = (coin) => {\r\n    if (canAfford(coin)) {\r\n      if (coins.some(e => e.id === coin.id)) {\r\n        let temp = [...coins];\r\n        let index = coins.findIndex(e => e.id === coin.id);\r\n        temp[index].amountOwned += 1;\r\n        setCoins(temp);\r\n      } else {\r\n        coin.amountOwned = 1;\r\n        setCoins(prevState => [...prevState, coin]);\r\n      }\r\n      setMoney(money - Number(coin.price));\r\n      spawnToast(`You successfully acquired 1 ${coin.id} for $${roundToTwo(coin.price)}`)\r\n    } else {\r\n      spawnToast(`You cannot afford to buy ${coin.id} due to lack of funds.`, 'error')\r\n    }\r\n  }\r\n\r\n  const sellCoin = (coin) => {\r\n    let temp = [...coins];\r\n    let index = temp.findIndex(e => e.id === coin.id);\r\n    if (temp[index].amountOwned > 1) {\r\n      temp[index].amountOwned -= 1;\r\n    } else {\r\n      temp.splice(index, 1);\r\n    }\r\n    setCoins(temp);\r\n    setMoney(money + Number(coin.price)) // TODO: Fetch new price\r\n    spawnToast(`You successfully sold your ${coin.id} for $${roundToTwo(coin.price)}`)\r\n  }\r\n\r\n  const addMoney = () => {\r\n    spawnToast(\"YOU'RE BLOODY RICH MATE, WHAT ARE YA GONNA DO WITH ALL THOSE DOLLARYDOOS?\", \"warning\")\r\n    setMoney(money + 100)\r\n  };\r\n\r\n  const canAfford = coin => {\r\n    return money > coin.price;\r\n  }\r\n\r\n  const toast = useToast();\r\n  const spawnToast = (description, status, position) => {\r\n    toast({\r\n      description: description,\r\n      status: status,\r\n      position: position,\r\n      duration: 2000,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Box textAlign=\"center\" fontSize=\"xl\">\r\n      <Grid minH=\"100vh\" p={3}>\r\n        <Header/>\r\n        <VStack spacing={4}>\r\n          <MarketList\r\n            spawnToast={spawnToast}\r\n            money={money}\r\n            setMoney={setMoney}\r\n            purchaseCoin={purchaseCoin}\r\n          />\r\n          <CoinList\r\n            spawnToast={spawnToast}\r\n            coins={coins}\r\n            sellCoin={sellCoin}\r\n          />\r\n          <Money money={money}/>\r\n          <MoneyButton addMoney={addMoney}/>\r\n        </VStack>\r\n        <Footer></Footer>\r\n      </Grid>\r\n    </Box>\r\n  )\r\n}","import React from 'react';\nimport {\n  ChakraProvider,\n  theme,\n} from '@chakra-ui/react';\n\nimport { Main } from './components/Main';\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Main />\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}