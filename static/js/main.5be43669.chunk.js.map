{"version":3,"sources":["Util.js","components/CoinList.jsx","components/Copyright.jsx","components/Logo.jsx","components/SocialMediaLinks.jsx","components/NomicsCredit.jsx","components/Footer.jsx","ColorModeSwitcher.js","components/InfoButton.jsx","components/Header.jsx","components/BuyModal.jsx","components/MarketList.jsx","components/MarketTable.jsx","components/Market.jsx","components/Money.jsx","components/MoneyButton.jsx","components/SellButton.jsx","components/Main.jsx","services/StorageService.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["roundToTwo","num","Math","round","pow","toFixed","CoinList","coins","sellCoin","useDisclosure","isOpen","onOpen","onClose","useState","currentCoin","setCurrentCoin","amount","setAmount","flexDirection","width","justifyContent","textAlign","id","defaultValue","min","max","amountOwned","onChange","value","price","leftIcon","NotAllowed","colorScheme","onClick","variant","CheckCircle","minH","wrap","border","borderRadius","align","p","length","map","coin","i","handleSell","boxSize","src","logo_url","marginLeft","color","Copyright","props","fontSize","Date","getFullYear","Logo","svg","useColorModeValue","viewBox","fill","h","flexShrink","d","SocialMediaLinks","as","href","icon","NomicsCredit","borderBottom","display","Footer","direction","spacing","justify","size","alignSelf","base","sm","ColorModeSwitcher","toggleColorMode","useColorMode","text","SwitchIcon","FaMoon","FaSun","InfoButton","Info","Header","height","BuyModal","showModalButtonText","money","purchaseCoin","spawnToast","floor","name","allowMouseWheel","clampValueOnBlur","keepWithinRange","MarketList","marketCoins","getColor","lastFetch","fetchCoins","maxHeight","style","overflowY","overflowX","overflowInline","m","price_change_pct","price_change","MarketTable","isLoaded","Repeat","isLoading","isNumeric","volume","Market","isDesktop","URL","process","setMarketCoins","setIsLoaded","toUTCString","setLastFetch","a","fetch","mode","then","res","json","err","useEffect","change","Money","MoneyButton","addMoney","Add","SellButton","sellAllCoins","calculatePortfolioValue","rightIcon","Moon","Main","window","innerWidth","setDesktop","updateMedia","addEventListener","removeEventListener","setCoins","localStorage","getItem","JSON","parse","setMoney","portfolio","setItem","stringify","moneyEarned","forEach","element","canAfford","toast","useToast","description","status","position","duration","some","e","temp","findIndex","Number","prevState","index","splice","App","theme","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5be43669.chunk.js","sourcesContent":["export function roundToTwo(num) {    \r\n    return (Math.round(num*Math.pow(10,2))/Math.pow(10,2)).toFixed(2);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { CheckCircleIcon, NotAllowedIcon } from '@chakra-ui/icons';\r\nimport {\r\n    Button, Flex, HStack, Image, Modal,\r\n    ModalBody,\r\n    ModalContent,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    ModalOverlay, NumberDecrementStepper, NumberIncrementStepper, NumberInput,\r\n    NumberInputField,\r\n    NumberInputStepper, Text, useDisclosure, VStack\r\n} from '@chakra-ui/react';\r\nimport React, { useState } from 'react';\r\nimport { roundToTwo } from '../Util';\r\n\r\nexport const CoinList = ({coins, sellCoin}) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [currentCoin, setCurrentCoin] = useState({});\r\n  const [amount, setAmount] = useState(0);\r\n  const handleSell = coin => {\r\n    setCurrentCoin(coin);\r\n    onOpen();\r\n  };\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\" width=\"100%\" justifyContent=\"space-around\">\r\n      <Modal isOpen={isOpen} onClose={onClose}  >\r\n        <ModalOverlay />\r\n        <ModalContent >\r\n          <ModalHeader textAlign=\"center\">\r\n            Selling: {currentCoin.id}\r\n          </ModalHeader>\r\n          <ModalBody textAlign=\"center\">\r\n            <VStack>\r\n              <Text>How much {currentCoin.id} would you like to sell?</Text>\r\n              <NumberInput\r\n                defaultValue={1}\r\n                min={1}\r\n                max={currentCoin.amountOwned}\r\n                onChange={value => setAmount(value)}\r\n                value={amount}\r\n              >\r\n                <NumberInputField />\r\n                <NumberInputStepper>\r\n                  <NumberIncrementStepper />\r\n                  <NumberDecrementStepper />\r\n                </NumberInputStepper>\r\n              </NumberInput>\r\n              <Text>\r\n                Total price: ${roundToTwo(amount * currentCoin.price)}\r\n              </Text>\r\n            </VStack>\r\n          </ModalBody>\r\n\r\n          <ModalFooter justifyContent=\"center\">\r\n            <HStack>\r\n              <Button\r\n                leftIcon={<NotAllowedIcon />}\r\n                colorScheme=\"red\"\r\n                onClick={() => {onClose(); setAmount(0)}}\r\n                variant=\"outline\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                leftIcon={<CheckCircleIcon />}\r\n                colorScheme=\"purple\"\r\n                variant=\"outline\"\r\n                onClick={() => {\r\n                  sellCoin(currentCoin, amount);\r\n                  onClose();\r\n                  setAmount(0);\r\n                }}\r\n              >\r\n                Sell\r\n              </Button>\r\n            </HStack>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n      <Flex\r\n        minH={50}\r\n        wrap=\"wrap\"\r\n        border=\"1px solid #303b52\"\r\n        borderRadius={5}\r\n        justifyContent=\"space-around\"\r\n        align=\"center\"\r\n        p={2}\r\n      >\r\n        {coins.length ? (\r\n          coins.map((coin, i) => (\r\n            <Flex key={coin.id} onClick={() => handleSell(coin)}>\r\n              <Image boxSize={30} src={coin.logo_url} />\r\n              <Text marginLeft={2}>{coin.amountOwned}</Text>\r\n            </Flex>\r\n          ))\r\n        ) : (\r\n          <Text color=\"#303b52\">Your coins will appear here.</Text>\r\n        )}\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Text } from '@chakra-ui/layout'\r\nimport * as React from 'react'\r\n\r\nexport const Copyright = (props) => (\r\n  <Text fontSize=\"sm\" {...props} color=\"grey\">\r\n    &copy; {new Date().getFullYear()} CryptoPlayground Inc. No rights reserved.\r\n  </Text>\r\n)\r\n","import { chakra, useColorModeValue } from '@chakra-ui/react'\r\nimport * as React from 'react'\r\n\r\nexport const Logo = (props) => {\r\n  return (\r\n    <chakra.svg\r\n      color={useColorModeValue('blue.500', 'blue.300')}\r\n      aria-hidden\r\n      viewBox=\"0 0 27 24\"\r\n      fill=\"none\"\r\n      h=\"6\"\r\n      flexShrink={0}\r\n      {...props}\r\n    >\r\n      <path\r\n        d=\"M25 23ZL25 24M13 24A1 1 0 0012 0A1 1 0 0013 24M27 0 27 24 0 12\"\r\n        fill=\"currentColor\"\r\n      />\r\n    </chakra.svg>\r\n  )\r\n}\r\n","import { ButtonGroup, IconButton } from '@chakra-ui/react'\r\nimport * as React from 'react'\r\nimport { FaGithub, FaLinkedin } from 'react-icons/fa'\r\n\r\nconst LINKEDIN_URL = \"https://www.linkedin.com/in/svschaik/\";\r\nconst GITHUB_URL = \"https://github.com/devsiriso/\"\r\n\r\nexport const SocialMediaLinks = (props) => (\r\n    <ButtonGroup variant=\"ghost\" color=\"gray.600\" {...props}>\r\n        <IconButton as=\"a\" href={LINKEDIN_URL} aria-label=\"LinkedIn\" icon={<FaLinkedin fontSize=\"20px\" />} />\r\n        <IconButton as=\"a\" href={GITHUB_URL} aria-label=\"GitHub\" icon={<FaGithub fontSize=\"20px\" />} />\r\n    </ButtonGroup>\r\n)\r\n","import { Link, Text } from '@chakra-ui/react';\r\n\r\nexport const NomicsCredit = () => {\r\n  return (\r\n    <Link href=\"https://nomics.com/\" fontSize=\"xs\">\r\n      <Text borderBottom=\"1px solid purple\" display=\"inline-block\">\r\n        Crypto Market Cap & Pricing Data Provided by Nomics\r\n      </Text>\r\n    </Link>\r\n  );\r\n};\r\n","import { Box, Heading, Stack } from '@chakra-ui/react'\r\nimport React from \"react\"\r\nimport { Copyright } from './Copyright'\r\nimport { Logo } from './Logo'\r\nimport { SocialMediaLinks } from './SocialMediaLinks'\r\nimport { NomicsCredit } from './NomicsCredit'\r\n\r\nexport const Footer = () => {\r\n  return (\r\n    <Box>\r\n      <Stack>\r\n        <Stack direction=\"row\" spacing=\"4\" align=\"center\" justify=\"space-between\">\r\n\r\n          <Logo />\r\n          <Heading size=\"md\">CryptoPlayground</Heading>\r\n          <SocialMediaLinks />\r\n        </Stack>\r\n\r\n        <Copyright\r\n          alignSelf={{\r\n            base: 'center',\r\n            sm: 'start',\r\n          }}\r\n        />\r\n            <NomicsCredit/>\r\n      </Stack>\r\n    </Box>\r\n  )\r\n}","import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import { InfoIcon } from '@chakra-ui/icons';\r\nimport {\r\n    Button, IconButton, Popover, PopoverArrow, PopoverBody, PopoverCloseButton, PopoverContent, PopoverFooter, PopoverHeader, PopoverTrigger\r\n} from '@chakra-ui/react';\r\n\r\nexport const InfoButton = () => {\r\n  return (\r\n    <Popover>\r\n         {({ isOpen, onClose }) => (\r\n         <>\r\n            <PopoverTrigger>\r\n        <IconButton variant=\"ghost\" icon={<InfoIcon />} />\r\n      </PopoverTrigger>\r\n      <PopoverContent>\r\n        <PopoverArrow />\r\n        <PopoverCloseButton />\r\n        <PopoverHeader>Welcome to CryptoPlayground</PopoverHeader>\r\n        <PopoverBody>\r\n          Click on the '+' next to a specific coin to buy it. \r\n          <br/>Click on one of the coins in your portfolio to sell it. \r\n          <br/>You can add more money to your bank by pressing the green button. \r\n          <br/>You can sell all your coins and claim your ride to the moon by pressing the pink button.\r\n        </PopoverBody>\r\n        <PopoverFooter>\r\n          <Button width=\"100%\" colorScheme=\"teal\" onClick={onClose}>\r\n              Start your trading adventure!\r\n          </Button>\r\n        </PopoverFooter>\r\n      </PopoverContent></>)}\r\n    </Popover>\r\n  );\r\n};\r\n","import { Flex, Heading, Stack } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { ColorModeSwitcher } from '../ColorModeSwitcher';\r\nimport { InfoButton } from './InfoButton';\r\nimport { Logo } from './Logo';\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <Flex justify=\"center\" height=\"10%\" justifyContent=\"space-between\" width=\"100%\">\r\n      <ColorModeSwitcher/>\r\n      {/* <Heading size=\"md\">CryptoPlayground</Heading> */}\r\n      {/* <Logo /> */}\r\n      {/* <ColorModeSwitcher/> */}\r\n\r\n      <Stack direction=\"row\" spacing=\"4\" align=\"center\" justify=\"space-between\">\r\n        <Logo />\r\n        <Heading size=\"lg\">CryptoPlayground</Heading>\r\n      </Stack>\r\n      <InfoButton/>\r\n    </Flex>\r\n  );\r\n};\r\n","import { CheckCircleIcon, NotAllowedIcon } from '@chakra-ui/icons';\r\nimport {\r\n  Button,\r\n  HStack,\r\n  Modal,\r\n  ModalBody,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  NumberDecrementStepper,\r\n  NumberIncrementStepper,\r\n  NumberInput,\r\n  NumberInputField,\r\n  NumberInputStepper,\r\n  Text,\r\n  useDisclosure,\r\n  VStack,\r\n} from '@chakra-ui/react';\r\nimport React, { useState } from 'react';\r\nimport { roundToTwo } from '../Util';\r\nexport const BuyModal = ({\r\n  showModalButtonText,\r\n  coin,\r\n  money,\r\n  purchaseCoin,\r\n  spawnToast,\r\n  size,\r\n}) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [amount, setAmount] = useState(0);\r\n  const max = Math.floor(money / coin.price);\r\n\r\n  const onChange = value => {\r\n    if (value > max) return;\r\n    setAmount(value);\r\n  };\r\n\r\n  const onClick = () => {\r\n    if (coin.price > money) {\r\n      spawnToast(\r\n        `You do not have enough funds to acquire ${coin.name}`,\r\n        'error'\r\n      );\r\n    } else {\r\n      onOpen();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button colorScheme=\"green\" variant=\"outline\" onClick={onClick}>\r\n        {showModalButtonText}\r\n      </Button>\r\n      <Modal isOpen={isOpen} onClose={onClose} size={size}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader textAlign=\"center\">Buying: {coin.id}</ModalHeader>\r\n          <ModalBody textAlign=\"center\">\r\n            <VStack>\r\n              <Text>How much {coin.id} would you like to purchase?</Text>\r\n              <Text>Maximum you can afford: {max}</Text>\r\n              <NumberInput\r\n                defaultValue={1}\r\n                min={1}\r\n                max={money / coin.price}\r\n                onChange={onChange}\r\n                value={amount}\r\n                allowMouseWheel\r\n                clampValueOnBlur\r\n                keepWithinRange\r\n              >\r\n                <NumberInputField />\r\n                <NumberInputStepper>\r\n                  <NumberIncrementStepper />\r\n                  <NumberDecrementStepper />\r\n                </NumberInputStepper>\r\n              </NumberInput>\r\n              <Text>\r\n                Total price: <b>${roundToTwo(amount * coin.price)}</b>\r\n              </Text>\r\n            </VStack>\r\n          </ModalBody>\r\n\r\n          <ModalFooter justifyContent=\"center\">\r\n            <HStack>\r\n              <Button\r\n                leftIcon={<NotAllowedIcon />}\r\n                colorScheme=\"red\"\r\n                onClick={() => {\r\n                  onClose();\r\n                  setAmount(0);\r\n                }}\r\n                variant=\"outline\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                leftIcon={<CheckCircleIcon />}\r\n                colorScheme=\"purple\"\r\n                variant=\"outline\"\r\n                onClick={() => {\r\n                  purchaseCoin(coin, amount);\r\n                  onClose();\r\n                  setAmount(0);\r\n                }}\r\n              >\r\n                Buy\r\n              </Button>\r\n            </HStack>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","import { Divider, Flex, HStack, Image, List, Text } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { roundToTwo } from '../Util';\r\nimport { BuyModal } from './BuyModal';\r\n\r\nexport const MarketList = ({\r\n  marketCoins,\r\n  getColor,\r\n  purchaseCoin,\r\n  money,\r\n  spawnToast,\r\n  lastFetch,\r\n  fetchCoins\r\n}) => {\r\n  return (\r\n    <Flex direction=\"column\" width=\"100%\" align=\"center\">\r\n      <List\r\n        width=\"100%\"\r\n        maxHeight=\"50vh\"\r\n        style={{\r\n          overflowY: 'auto',\r\n          overflowX: 'hidden',\r\n          overflowInline: 'hidden',\r\n        }}\r\n      >\r\n          <Divider m={2}/>\r\n        {marketCoins &&\r\n          marketCoins.map((coin, i) => (\r\n            <Flex direction=\"column\" key={coin.id}>\r\n              <Flex key={coin.id} justifyContent=\"space-between\">\r\n                <HStack>\r\n                  <Image src={coin.logo_url} boxSize=\"30px\" />\r\n                  <Flex direction=\"column\" style={{ textAlign: 'left' }}>\r\n                    <Text>{coin.id}</Text>\r\n                    <Text fontSize=\"sm\">{coin.name}</Text>\r\n                  </Flex>\r\n                </HStack>\r\n\r\n                <HStack>\r\n                  <Flex direction=\"column\" style={{ textAlign: 'right' }}>\r\n                    <Text>${roundToTwo(coin.price)}</Text>\r\n                    <Text\r\n                      fontSize=\"sm\"\r\n                      color={getColor(coin['1d'].price_change_pct)}\r\n                    >\r\n                      {roundToTwo(coin['1d'].price_change)}(\r\n                      {roundToTwo(coin['1d'].price_change_pct)}%)\r\n                    </Text>\r\n                  </Flex>\r\n                  <BuyModal\r\n                    showModalButtonText=\"+\"\r\n                    coin={coin}\r\n                    money={money}\r\n                    purchaseCoin={purchaseCoin}\r\n                    spawnToast={spawnToast}\r\n                    size=\"xs\"\r\n                  />\r\n                </HStack>\r\n              </Flex>\r\n              <Divider m={2} />\r\n            </Flex>\r\n          ))}\r\n      </List>\r\n      <Text as=\"u\" onClick={fetchCoins} textAlign=\"center\">Last update: {lastFetch} (click to refresh)</Text>\r\n    </Flex>\r\n  );\r\n};\r\n","import { RepeatIcon } from '@chakra-ui/icons';\r\nimport {\r\n  IconButton,\r\n  Image,\r\n  Table,\r\n  TableCaption,\r\n  Tbody,\r\n  Td,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n} from '@chakra-ui/react';\r\nimport { roundToTwo } from '../Util';\r\nimport { BuyModal } from './BuyModal';\r\nexport const MarketTable = ({\r\n  lastFetch,\r\n  fetchCoins,\r\n  isLoaded,\r\n  marketCoins,\r\n  getColor,\r\n  money,\r\n  purchaseCoin,\r\n  spawnToast,\r\n}) => {\r\n  return (\r\n    <Table variant=\"striped\" size=\"sm\">\r\n      <TableCaption>Last update: {lastFetch}</TableCaption>\r\n      <Thead>\r\n        <Tr>\r\n          <Th width=\"5%\">\r\n            {isLoaded ? (\r\n              <IconButton\r\n                variant=\"outline\"\r\n                colorScheme=\"teal\"\r\n                size=\"xs\"\r\n                onClick={() => fetchCoins()}\r\n                icon={<RepeatIcon />}\r\n              />\r\n            ) : (\r\n              <IconButton\r\n                isLoading\r\n                variant=\"outline\"\r\n                colorScheme=\"teal\"\r\n                size=\"xs\"\r\n                onClick={() => fetchCoins()}\r\n                icon={<RepeatIcon />}\r\n              />\r\n            )}\r\n          </Th>\r\n          <Th width=\"5%\">Ticker</Th>\r\n          <Th width=\"5%\">Coin</Th>\r\n          <Th width=\"5%\">Day Price Δ</Th>\r\n          <Th width=\"5%\">Month PriceΔ</Th>\r\n          <Th width=\"5%\">Day Volume</Th>\r\n          <Th width=\"5%\">Day Volume</Th>\r\n          <Th width=\"5%\">Month Volume Δ</Th>\r\n          <Th width=\"5%\">Day Volume Δ</Th>\r\n          <Th width=\"5%\" isNumeric>\r\n            Price\r\n          </Th>\r\n          <Th width=\"5%\" isNumeric></Th>\r\n        </Tr>\r\n      </Thead>\r\n      <Tbody>\r\n        {marketCoins &&\r\n          marketCoins.map((coin, i) => (\r\n            <Tr key={coin.id}>\r\n              <Td>\r\n                <Image src={coin.logo_url} boxSize=\"20px\" />\r\n              </Td>\r\n              <Td>{coin.id}</Td>\r\n              <Td>{coin.name}</Td>\r\n              <Td color={getColor(coin['1d'].price_change_pct)}>\r\n                {roundToTwo(coin['1d'].price_change_pct)}%\r\n              </Td>\r\n              <Td color={getColor(coin['30d'].price_change_pct)}>\r\n                {roundToTwo(coin['30d'].price_change_pct)}%\r\n              </Td>\r\n              <Td>{roundToTwo(coin['1d'].volume)}</Td>\r\n              <Td color={getColor(coin['1d'].price_change_pct)}>\r\n                {roundToTwo(coin['1d'].price_change_pct)}%\r\n              </Td>\r\n              <Td color={getColor(coin['30d'].price_change_pct)}>\r\n                {roundToTwo(coin['30d'].price_change_pct)}%\r\n              </Td>\r\n              <Td>{roundToTwo(coin['30d'].volume)}</Td>\r\n              <Td isNumeric>${roundToTwo(coin.price)}</Td>\r\n              <Td isNumeric>\r\n                <BuyModal\r\n                  showModalButtonText=\"+\"\r\n                  coin={coin}\r\n                  money={money}\r\n                  purchaseCoin={purchaseCoin}\r\n                  spawnToast={spawnToast}\r\n                  size=\"lg\"\r\n                ></BuyModal>\r\n              </Td>\r\n            </Tr>\r\n          ))}\r\n      </Tbody>\r\n    </Table>\r\n  );\r\n};\r\n","import {\r\n  Flex\r\n} from '@chakra-ui/react';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { getMarketCoins } from '../services/ApiService';\r\nimport { MarketList } from './MarketList';\r\nimport { MarketTable } from './MarketTable';\r\n// DECENT LOOKING COINS: BTC,TRX,TEL,BNB,ETC,USDP:\r\n\r\nexport const Market = ({ purchaseCoin, money, spawnToast, isDesktop }) => {\r\n  const COINS_TO_FETCH =\r\n    'BTC, ETH, BNB, USDP,BTC,TRX,TEL,BNB,ETC,USDP,DOGE,ADA,SOL,USDT,BCH';\r\n  const API_KEY = process.env.REACT_APP_API_KEY;\r\n  const URL = `https://api.nomics.com/v1/currencies/ticker?key=${API_KEY}&ids=${COINS_TO_FETCH}&interval=1d,30d&per-page=100&page=1`;\r\n\r\n  const [marketCoins, setMarketCoins] = useState([]);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [lastFetch, setLastFetch] = useState(new Date().toUTCString());\r\n\r\n  const fetchCoins = async () => {\r\n    fetch(URL, { mode: 'cors' })\r\n      .then(res => res.json())\r\n      .then(\r\n        res => {\r\n          setIsLoaded(true);\r\n          setLastFetch(new Date().toUTCString());\r\n          setMarketCoins(res);\r\n          spawnToast(\"Retrieved market information\")\r\n        },\r\n        err => {\r\n          spawnToast(\"Failed to retrieve market information.\", \"error\")\r\n        }\r\n      );\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCoins();\r\n    // setMarketCoins(getMarketCoins());\r\n  }, []);\r\n\r\n  const getColor = change => {\r\n    if (change < 0) return 'red.400';\r\n    if (change > 0) return 'green.400';\r\n  };\r\n\r\n \r\n\r\n  return (\r\n    <Flex width=\"100%\">\r\n      {isDesktop ? (\r\n        <MarketTable\r\n          marketCoins={marketCoins}\r\n          getColor={getColor}\r\n          purchaseCoin={purchaseCoin}\r\n          money={money}\r\n          spawnToast={spawnToast}\r\n          isLoaded={isLoaded}\r\n          fetchCoins={fetchCoins}\r\n          lastFetch={lastFetch}\r\n        />\r\n      ) : (\r\n        <MarketList\r\n          marketCoins={marketCoins}\r\n          getColor={getColor}\r\n          purchaseCoin={purchaseCoin}\r\n          money={money}\r\n          spawnToast={spawnToast}\r\n          fetchCoins={fetchCoins}\r\n          lastFetch={lastFetch}\r\n        />\r\n      )}\r\n    </Flex>\r\n  );\r\n};\r\n","import { Text } from \"@chakra-ui/layout\"\r\nimport { roundToTwo } from \"../Util\"\r\n\r\nexport const Money = props => {\r\n    return (<Text>You have: ${roundToTwo(props.money)}</Text>)\r\n}","import { AddIcon } from '@chakra-ui/icons';\r\nimport { Button } from '@chakra-ui/react';\r\n\r\nexport const MoneyButton = ({width, addMoney}) => {\r\n  return (\r\n    <>\r\n      <Button\r\n        variant=\"solid\"\r\n        m={2}\r\n        width={width}    \r\n        colorScheme=\"teal\"  \r\n        leftIcon={<AddIcon />}\r\n        onClick={() => addMoney()}\r\n      >\r\n        ADD SOME MONEY!\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n","import { MoonIcon, NotAllowedIcon } from '@chakra-ui/icons';\r\nimport {\r\n  Button,\r\n  HStack,\r\n  Modal,\r\n  ModalBody,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  useDisclosure\r\n} from '@chakra-ui/react';\r\nimport { roundToTwo } from '../Util';\r\n\r\nexport const SellButton = ({ width, sellAllCoins, calculatePortfolioValue }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  const handleLaunch = () => {\r\n    sellAllCoins();\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader textAlign=\"center\">\r\n            Are you sure you want to go to the moon?\r\n          </ModalHeader>\r\n\r\n          <ModalBody textAlign=\"center\">\r\n            This will sell all your coins for the current market price. You will\r\n            earn: <b>${roundToTwo(calculatePortfolioValue())}</b>\r\n          </ModalBody>\r\n\r\n          <ModalFooter justifyContent=\"center\">\r\n            <HStack>\r\n              <Button\r\n                leftIcon={<NotAllowedIcon />}\r\n                rightIcon={<NotAllowedIcon />}\r\n                colorScheme=\"red\"\r\n                onClick={onClose}\r\n              >\r\n                ABORT MISSION\r\n              </Button>\r\n              <Button colorScheme=\"purple\" onClick={() => handleLaunch()}>\r\n                🚀 LAUNCH 🚀\r\n              </Button>\r\n            </HStack>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n      <Button\r\n        variant=\"solid\"\r\n        m={2}\r\n        width={width}\r\n        colorScheme=\"purple\"\r\n        leftIcon={<MoonIcon />}\r\n        onClick={onOpen}\r\n      >\r\n        GO TO THE MOON\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n","import {\r\n  Flex, Heading, useToast,\r\n  VStack\r\n} from '@chakra-ui/react';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { retrievePortfolio, storePortfolio } from '../services/StorageService';\r\nimport { roundToTwo } from '../Util';\r\nimport { CoinList } from './CoinList';\r\nimport { Footer } from './Footer';\r\nimport { Header } from './Header';\r\nimport { Market } from './Market';\r\nimport { Money } from './Money';\r\nimport { MoneyButton } from './MoneyButton';\r\nimport { SellButton } from './SellButton';\r\n\r\nexport const Main = () => {\r\n  const [isDesktop, setDesktop] = useState(window.innerWidth > 1450);\r\n\r\n  const updateMedia = () => {\r\n    setDesktop(window.innerWidth > 1200);\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', updateMedia);\r\n    return () => window.removeEventListener('resize', updateMedia);\r\n  });\r\n\r\n  useEffect(() => {\r\n    setCoins(retrievePortfolio());\r\n  }, [])\r\n\r\n  const [money, setMoney] = useState(1000);\r\n  const [coins, setCoins] = useState([]);\r\n\r\n  useEffect(() => {\r\n    storePortfolio(coins);\r\n  }, [coins])\r\n\r\n  const purchaseCoin = (coin, amount) => {\r\n    if (canAfford(coin, amount)) {\r\n      if (coins.some(e => e.id === coin.id)) {\r\n        let temp = [...coins];\r\n        let index = coins.findIndex(e => e.id === coin.id);\r\n        temp[index].amountOwned += Number(amount);\r\n        setCoins(temp);\r\n        \r\n      } else {\r\n        coin.amountOwned = Number(amount);\r\n        setCoins(prevState => [...prevState, coin]);\r\n\r\n      }\r\n      setMoney(money - Number(coin.price * amount));\r\n      spawnToast(\r\n        `You successfully acquired ${amount} ${coin.id} for $${roundToTwo(\r\n          coin.price * amount\r\n        )}`\r\n      );\r\n    } else {\r\n      spawnToast(\r\n        `You cannot afford to buy ${amount} ${coin.id} due to lack of funds.`,\r\n        'error'\r\n      );\r\n    }\r\n  };\r\n\r\n  const sellCoin = (coin, amount) => {\r\n    let temp = [...coins];\r\n    let index = temp.findIndex(e => e.id === coin.id);\r\n    temp[index].amountOwned = temp[index].amountOwned - amount;\r\n    if (temp[index].amountOwned === 0) temp.splice(index, 1);\r\n    setCoins(temp);\r\n    setMoney(money + Number(coin.price * amount)); // TODO: Fetch new price\r\n    spawnToast(\r\n      `You successfully sold your ${amount} ${coin.id} for $${roundToTwo(\r\n        coin.price * amount\r\n      )}`\r\n    );\r\n  };\r\n\r\n  const sellAllCoins = () => {\r\n    let moneyEarned = calculatePortfolioValue();\r\n    spawnToast(\r\n      `You've launched off to the moon! Earning you $${roundToTwo(\r\n        moneyEarned\r\n      )}!`,\r\n      'success'\r\n    );\r\n    setCoins([]);\r\n    setMoney(money + moneyEarned);\r\n  };\r\n\r\n  const calculatePortfolioValue = () => {\r\n    let value = 0;\r\n    coins.forEach(element => {\r\n      value += element.amountOwned * element.price;\r\n    });\r\n\r\n    return value;\r\n  };\r\n\r\n  const addMoney = () => {\r\n    spawnToast(\r\n      \"You have added $100 to your \",\r\n      'warning'\r\n    );\r\n    setMoney(money + 100);\r\n  };\r\n\r\n  const canAfford = (coin, amount) => {\r\n    return money > coin.price * amount;\r\n  };\r\n\r\n  const toast = useToast();\r\n  const spawnToast = (description, status, position) => {\r\n    toast({\r\n      description: description,\r\n      status: status,\r\n      position: position,\r\n      duration: 2000,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Flex p={2} align=\"center\">\r\n      <VStack justifyContent=\"space-between\" width=\"100%\">\r\n        <Header />\r\n        <Heading size=\"md\" textAlign=\"center\">\r\n          Marketplace\r\n        </Heading>\r\n        <Market\r\n          isDesktop={isDesktop}\r\n          spawnToast={spawnToast}\r\n          money={money}\r\n          setMoney={setMoney}\r\n          purchaseCoin={purchaseCoin}\r\n        />\r\n        <CoinList\r\n          isDesktop={isDesktop}\r\n          spawnToast={spawnToast}\r\n          coins={coins}\r\n          sellCoin={sellCoin}\r\n        />\r\n        <Money money={money} />\r\n        {isDesktop ? (\r\n          <Flex \r\n            width=\"100vw\" \r\n            justifyContent=\"space-between\"\r\n          >\r\n            <MoneyButton \r\n              addMoney={addMoney} \r\n              width=\"50vw\" \r\n            />\r\n            <SellButton\r\n              sellAllCoins={sellAllCoins}\r\n              width=\"50vw\"\r\n              calculatePortfolioValue={calculatePortfolioValue}\r\n            />\r\n          </Flex>\r\n        ) : (\r\n          <Flex \r\n            flexDirection=\"column\" \r\n            width=\"100vw\"\r\n            >\r\n            <MoneyButton \r\n              addMoney={addMoney} \r\n              width=\"auto\" \r\n              />\r\n            <SellButton\r\n              sellAllCoins={sellAllCoins}\r\n              calculatePortfolioValue={calculatePortfolioValue}\r\n              width=\"auto\"\r\n            />\r\n          </Flex>\r\n        )}\r\n        <Footer />\r\n      </VStack>\r\n    </Flex>\r\n  );\r\n};\r\n","export const storePortfolio = (portfolio) => {\r\n    localStorage.setItem(\"portfolio\", JSON.stringify(portfolio));\r\n}\r\n\r\nexport const retrievePortfolio = () => {\r\n    if(localStorage.getItem(\"portfolio\")) {\r\n        return JSON.parse(localStorage.getItem(\"portfolio\"));\r\n    } else {\r\n        return [];\r\n    }\r\n}","import React from 'react';\nimport {\n  ChakraProvider,\n  theme,\n} from '@chakra-ui/react';\n\nimport { Main } from './components/Main';\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme} >\n      <Main/>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}