{"version":3,"sources":["Util.js","components/MarketList.jsx","components/CoinList.jsx","components/Copyright.jsx","components/Logo.jsx","components/SocialMediaLinks.jsx","components/NomicsCredit.jsx","components/Footer.jsx","ColorModeSwitcher.js","components/Header.jsx","components/Money.jsx","components/MoneyButton.jsx","components/SellButton.jsx","components/Main.jsx","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["roundToTwo","num","Math","round","pow","toFixed","MarketList","props","URL","process","useState","marketCoins","setMarketCoins","setError","isLoaded","setIsLoaded","Date","toUTCString","lastFetch","setLastFetch","fetchCoins","a","fetch","mode","then","res","json","result","error","useEffect","useDisclosure","isOpen","onOpen","onClose","currentCoin","setCurrentCoin","amount","setAmount","variant","textAlign","id","defaultValue","min","max","money","price","onChange","value","justifyContent","leftIcon","NotAllowed","colorScheme","onClick","CheckCircle","purchaseCoin","size","icon","Repeat","isLoading","isNumeric","map","coin","i","spawnToast","handleBuy","src","logo_url","boxSize","CoinList","flexDirection","width","amountOwned","sellCoin","minH","wrap","border","borderRadius","p","coins","length","handleSell","marginLeft","color","Copyright","fontSize","getFullYear","Logo","svg","useColorModeValue","viewBox","fill","h","flexShrink","d","SocialMediaLinks","as","href","NomicsCredit","borderBottom","display","Footer","role","mx","maxW","maxHeight","py","px","base","md","direction","spacing","align","justify","alignSelf","sm","ColorModeSwitcher","toggleColorMode","useColorMode","text","SwitchIcon","FaMoon","FaSun","Header","paddingLeft","paddingRight","Money","MoneyButton","Add","addMoney","SellButton","calculatePortfolioValue","rightIcon","sellAllCoins","Moon","Main","setMoney","setCoins","forEach","element","canAfford","toast","useToast","description","status","position","duration","some","e","temp","findIndex","prevState","Number","index","splice","moneyEarned","App","theme","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.613e37b4.chunk.js","sourcesContent":["export function roundToTwo(num) {    \r\n    return (Math.round(num*Math.pow(10,2))/Math.pow(10,2)).toFixed(2);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  TableCaption,\r\n  IconButton,\r\n  Modal,\r\n  ModalBody,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  HStack,\r\n  useDisclosure,\r\n  Button,\r\n  NumberInput,\r\n  NumberInputField,\r\n  NumberInputStepper,\r\n  NumberIncrementStepper,\r\n  NumberDecrementStepper,\r\n  VStack,\r\n  Text,\r\n} from '@chakra-ui/react';\r\nimport { RepeatIcon, NotAllowedIcon, CheckCircleIcon } from '@chakra-ui/icons';\r\nimport { Image } from '@chakra-ui/react';\r\nimport { roundToTwo } from '../Util';\r\n\r\n// DECENT LOOKING COINS: BTC,TRX,TEL,BNB,ETC,USDP:\r\n\r\nexport const MarketList = props => {\r\n  const COINS_TO_FETCH = 'BTC, ETH, BNB, ETC, USDP';\r\n  const API_KEY = process.env.REACT_APP_API_KEY;\r\n  const URL = `https://api.nomics.com/v1/currencies/ticker?key=${API_KEY}&ids=${COINS_TO_FETCH}&interval=1d,30d&per-page=100&page=1`;\r\n\r\n  const [marketCoins, setMarketCoins] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [lastFetch, setLastFetch] = useState(new Date().toUTCString());\r\n\r\n  const fetchCoins = async () => {\r\n    fetch(URL, { mode: 'cors' })\r\n      .then(res => res.json())\r\n      .then(\r\n        result => {\r\n          setIsLoaded(true);\r\n          setLastFetch(new Date().toUTCString());\r\n          setMarketCoins(result);\r\n        },\r\n        error => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      );\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCoins(); \r\n  }, []);\r\n\r\n  const getColor = change => {\r\n    if (change < 0) return 'red.400';\r\n    if (change > 0) return 'green.400';\r\n  };\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [currentCoin, setCurrentCoin] = useState({});\r\n  const [amount, setAmount] = useState(0);\r\n  const handleBuy = coin => {\r\n    if (props.money > coin.price) {\r\n      setCurrentCoin(coin);\r\n      onOpen();\r\n    } else {\r\n      props.spawnToast(\r\n        `You do not have enough funds to acquire ${coin.id}`,\r\n        'error'\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Table variant=\"simple\">\r\n      <Modal isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader textAlign=\"center\">Buying: {currentCoin.id}</ModalHeader>\r\n          <ModalBody textAlign=\"center\">\r\n            <VStack>\r\n              <Text>How much {currentCoin.id} would you like to purchase?</Text>\r\n              <NumberInput\r\n                defaultValue={0}\r\n                min={0}\r\n                max={props.money / currentCoin.price}\r\n                onChange={value => setAmount(value)}\r\n                value={amount}\r\n              >\r\n                <NumberInputField />\r\n                <NumberInputStepper>\r\n                  <NumberIncrementStepper />\r\n                  <NumberDecrementStepper />\r\n                </NumberInputStepper>\r\n              </NumberInput>\r\n              <Text>\r\n                Total price: ${roundToTwo(amount * currentCoin.price)}\r\n              </Text>\r\n            </VStack>\r\n          </ModalBody>\r\n\r\n          <ModalFooter justifyContent=\"center\">\r\n            <HStack>\r\n              <Button\r\n                leftIcon={<NotAllowedIcon />}\r\n                colorScheme=\"red\"\r\n                onClick={() => {\r\n                  onClose();\r\n                  setAmount(0);\r\n                }}\r\n                variant=\"outline\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                leftIcon={<CheckCircleIcon />}\r\n                colorScheme=\"purple\"\r\n                variant=\"outline\"\r\n                onClick={() => {\r\n                  props.purchaseCoin(currentCoin, amount);\r\n                  onClose();\r\n                  setAmount(0);\r\n                }}\r\n              >\r\n                Buy\r\n              </Button>\r\n            </HStack>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n      <TableCaption>Last update: {lastFetch}</TableCaption>\r\n      <Thead>\r\n        <Tr>\r\n          <Th>\r\n            {isLoaded ? (\r\n              <IconButton\r\n                variant=\"outline\"\r\n                colorScheme=\"teal\"\r\n                size=\"xs\"\r\n                onClick={() => fetchCoins()}\r\n                icon={<RepeatIcon />}\r\n              />\r\n            ) : (\r\n              <IconButton\r\n                isLoading\r\n                variant=\"outline\"\r\n                colorScheme=\"teal\"\r\n                size=\"xs\"\r\n                onClick={() => fetchCoins()}\r\n                icon={<RepeatIcon />}\r\n              />\r\n            )}\r\n          </Th>\r\n          <Th>Coin</Th>\r\n          {/* <Th>Day Δ</Th>\r\n          <Th>Month Δ</Th> */}\r\n          <Th isNumeric>Price</Th>\r\n        </Tr>\r\n      </Thead>\r\n      <Tbody>\r\n        {marketCoins &&\r\n          marketCoins.map((coin, i) => (\r\n            <Tr key={coin.id} onClick={() => handleBuy(coin)}>\r\n              <Td>\r\n                <Image src={coin.logo_url} boxSize=\"20px\" />\r\n              </Td>\r\n              <Td>{coin.id}</Td>\r\n              {/* <Td color={getColor(coin['1d'].price_change_pct)}>\r\n                {roundToTwo(coin['1d'].price_change_pct)}%\r\n              </Td>\r\n              <Td color={getColor(coin['30d'].price_change_pct)}>\r\n                {roundToTwo(coin['30d'].price_change_pct)}%\r\n              </Td> */}\r\n\r\n              <Td isNumeric>${roundToTwo(coin.price)}</Td>\r\n            </Tr>\r\n          ))}\r\n      </Tbody>\r\n    </Table>\r\n  );\r\n};\r\n","import {\r\n  Flex,\r\n  Image,\r\n  Text,\r\n  Modal,\r\n  ModalBody,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  HStack,\r\n  useDisclosure,\r\n  Button,\r\n  NumberInput,\r\n  NumberInputField,\r\n  NumberInputStepper,\r\n  NumberIncrementStepper,\r\n  NumberDecrementStepper,\r\n  VStack,\r\n} from '@chakra-ui/react';\r\nimport { RepeatIcon, NotAllowedIcon, CheckCircleIcon } from '@chakra-ui/icons';\r\nimport React, { useState } from 'react';\r\nimport { roundToTwo } from '../Util';\r\n\r\nexport const CoinList = props => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [currentCoin, setCurrentCoin] = useState({});\r\n  const [amount, setAmount] = useState(0);\r\n  const handleSell = coin => {\r\n    setCurrentCoin(coin);\r\n    onOpen();\r\n  };\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\" width=\"100%\" justifyContent=\"space-around\">\r\n      <Modal isOpen={isOpen} onClose={onClose}  >\r\n        <ModalOverlay />\r\n        <ModalContent >\r\n          <ModalHeader textAlign=\"center\">\r\n            Selling: {currentCoin.id}\r\n          </ModalHeader>\r\n          <ModalBody textAlign=\"center\">\r\n            <VStack>\r\n              <Text>How much {currentCoin.id} would you like to sell?</Text>\r\n              <NumberInput\r\n                defaultValue={1}\r\n                min={1}\r\n                max={currentCoin.amountOwned}\r\n                onChange={value => setAmount(value)}\r\n                value={amount}\r\n              >\r\n                <NumberInputField />\r\n                <NumberInputStepper>\r\n                  <NumberIncrementStepper />\r\n                  <NumberDecrementStepper />\r\n                </NumberInputStepper>\r\n              </NumberInput>\r\n              <Text>\r\n                Total price: ${roundToTwo(amount * currentCoin.price)}\r\n              </Text>\r\n            </VStack>\r\n          </ModalBody>\r\n\r\n          <ModalFooter justifyContent=\"center\">\r\n            <HStack>\r\n              <Button\r\n                leftIcon={<NotAllowedIcon />}\r\n                colorScheme=\"red\"\r\n                onClick={() => {onClose(); setAmount(0)}}\r\n                variant=\"outline\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                leftIcon={<CheckCircleIcon />}\r\n                colorScheme=\"purple\"\r\n                variant=\"outline\"\r\n                onClick={() => {\r\n                  props.sellCoin(currentCoin, amount);\r\n                  onClose();\r\n                  setAmount(0);\r\n                }}\r\n              >\r\n                Sell\r\n              </Button>\r\n            </HStack>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n      <Flex\r\n        minH={50}\r\n        wrap=\"wrap\"\r\n        border=\"1px solid grey\"\r\n        borderRadius={5}\r\n        justifyContent=\"space-around\"\r\n        p={2}\r\n      >\r\n        {props.coins.length ? (\r\n          props.coins.map((coin, i) => (\r\n            <Flex key={coin.id} onClick={() => handleSell(coin)}>\r\n              <Image boxSize={30} src={coin.logo_url} />\r\n              <Text marginLeft={2}>{coin.amountOwned}</Text>\r\n            </Flex>\r\n          ))\r\n        ) : (\r\n          <Text color=\"gray\">Your coins will appear here.</Text>\r\n        )}\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Text } from '@chakra-ui/layout'\r\nimport * as React from 'react'\r\n\r\nexport const Copyright = (props) => (\r\n  <Text fontSize=\"sm\" {...props} color=\"grey\">\r\n    &copy; {new Date().getFullYear()} CryptoPlayground Inc. No rights reserved.\r\n  </Text>\r\n)\r\n","import { chakra, useColorModeValue } from '@chakra-ui/react'\r\nimport * as React from 'react'\r\n\r\nexport const Logo = (props) => {\r\n  return (\r\n    <chakra.svg\r\n      color={useColorModeValue('blue.500', 'blue.300')}\r\n      aria-hidden\r\n      viewBox=\"0 0 27 24\"\r\n      fill=\"none\"\r\n      h=\"6\"\r\n      flexShrink={0}\r\n      {...props}\r\n    >\r\n      <path\r\n        d=\"M25 23ZL25 24M13 24A1 1 0 0012 0A1 1 0 0013 24M27 0 27 24 0 12\"\r\n        fill=\"currentColor\"\r\n      />\r\n    </chakra.svg>\r\n  )\r\n}\r\n","import { ButtonGroup, IconButton } from '@chakra-ui/react'\r\nimport * as React from 'react'\r\nimport { FaGithub, FaLinkedin } from 'react-icons/fa'\r\n\r\nconst LINKEDIN_URL = \"https://www.linkedin.com/in/svschaik/\";\r\nconst GITHUB_URL = \"https://github.com/devsiriso/\"\r\n\r\nexport const SocialMediaLinks = (props) => (\r\n    <ButtonGroup variant=\"ghost\" color=\"gray.600\" {...props}>\r\n        <IconButton as=\"a\" href={LINKEDIN_URL} aria-label=\"LinkedIn\" icon={<FaLinkedin fontSize=\"20px\" />} />\r\n        <IconButton as=\"a\" href={GITHUB_URL} aria-label=\"GitHub\" icon={<FaGithub fontSize=\"20px\" />} />\r\n    </ButtonGroup>\r\n)\r\n","import { Link, Box, Text } from '@chakra-ui/react';\r\n\r\nexport const NomicsCredit = () => {\r\n  return (\r\n    <Link href=\"https://nomics.com/\" fontSize=\"xs\">\r\n      <Text borderBottom=\"1px solid purple\" display=\"inline-block\">\r\n        Crypto Market Cap & Pricing Data Provided by Nomics\r\n      </Text>\r\n    </Link>\r\n  );\r\n};\r\n","import { Box, Heading, Stack } from '@chakra-ui/react'\r\nimport React from \"react\"\r\nimport { Copyright } from './Copyright'\r\nimport { Logo } from './Logo'\r\nimport { SocialMediaLinks } from './SocialMediaLinks'\r\nimport { NomicsCredit } from './NomicsCredit'\r\n\r\nexport const Footer = () => {\r\n  return (\r\n    <Box\r\n      as=\"footer\"\r\n      role=\"contentinfo\"\r\n      mx=\"auto\"\r\n      maxW=\"7xl\"\r\n      maxHeight=\"100px\" // \r\n      py=\"12\"\r\n      px={{\r\n        base: '4',\r\n        md: '8',\r\n      }}\r\n    >\r\n      <Stack>\r\n        <Stack direction=\"row\" spacing=\"4\" align=\"center\" justify=\"space-between\">\r\n\r\n          <Logo />\r\n          <Heading size=\"md\">CryptoPlayground</Heading>\r\n          <SocialMediaLinks />\r\n        </Stack>\r\n\r\n        <Copyright\r\n          alignSelf={{\r\n            base: 'center',\r\n            sm: 'start',\r\n          }}\r\n        />\r\n            <NomicsCredit/>\r\n      </Stack>\r\n    </Box>\r\n  )\r\n}","import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import { Flex, Heading } from \"@chakra-ui/react\";\r\nimport React from 'react';\r\nimport { ColorModeSwitcher } from '../ColorModeSwitcher';\r\nimport { Logo } from './Logo';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <Flex align=\"center\" justify=\"space-between\" paddingLeft={25} paddingRight={25} maxHeight={50}>\r\n            <Logo />\r\n            <Heading size=\"md\">CryptoPlayground</Heading>\r\n            <ColorModeSwitcher/>\r\n        </Flex>\r\n\r\n    )\r\n}\r\n\r\n","import { Text } from \"@chakra-ui/layout\"\r\nimport { roundToTwo } from \"../Util\"\r\n\r\nexport const Money = props => {\r\n    return (<Text>You have: ${roundToTwo(props.money)}</Text>)\r\n}","import { Box, Button } from '@chakra-ui/react';\r\nimport { AddIcon } from '@chakra-ui/icons';\r\n\r\nexport const MoneyButton = props => {\r\n  return (\r\n    <Box>\r\n      <Button\r\n        variant=\"solid\"\r\n        leftIcon={<AddIcon />}\r\n        colorScheme=\"teal\"\r\n        size=\"lg\"\r\n        onClick={() => props.addMoney()}\r\n      >\r\n        ADD SOME MONEY!\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n","import { MoonIcon, NotAllowedIcon } from '@chakra-ui/icons';\r\nimport {\r\n    Box, Button, HStack, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, useDisclosure\r\n} from '@chakra-ui/react';\r\nimport { roundToTwo } from '../Util';\r\n\r\nexport const SellButton = (props) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  \r\n  const handleLaunch = () => {\r\n    props.sellAllCoins();\r\n    onClose();\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Modal isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader textAlign=\"center\">Are you sure you want to go to the moon?</ModalHeader>\r\n\r\n          <ModalBody textAlign=\"center\">\r\n            This will sell all your coins for the current market price.\r\n            You will earn: <b>${roundToTwo(props.calculatePortfolioValue())}</b>\r\n          </ModalBody>\r\n\r\n          <ModalFooter justifyContent=\"center\">\r\n            <HStack>\r\n              <Button leftIcon={<NotAllowedIcon />} rightIcon={<NotAllowedIcon />} colorScheme=\"red\" onClick={onClose}>\r\n                ABORT MISSION\r\n              </Button>\r\n              <Button colorScheme=\"purple\" onClick={() => handleLaunch()} >🚀 LAUNCH 🚀</Button>\r\n            </HStack>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n      <Button\r\n        variant=\"solid\"\r\n        leftIcon={<MoonIcon />}\r\n\r\n        size=\"lg\"\r\n        colorScheme=\"purple\"\r\n        onClick={onOpen}\r\n      >\r\n        GO TO THE MOON\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  VStack,\r\n  HStack,\r\n  Grid,\r\n  useToast,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n} from '@chakra-ui/react';\r\nimport { MarketList } from './MarketList';\r\nimport { CoinList } from './CoinList';\r\nimport { Footer } from './Footer';\r\nimport { Header } from './Header';\r\nimport { roundToTwo } from '../Util';\r\nimport { Money } from './Money';\r\nimport { MoneyButton } from './MoneyButton';\r\nimport { SellButton } from './SellButton';\r\n\r\nexport const Main = () => {\r\n  const [money, setMoney] = useState(1000);\r\n  const [coins, setCoins] = useState([]);\r\n\r\n  const purchaseCoin = (coin, amount) => {\r\n    if (canAfford(coin, amount)) {\r\n      if (coins.some(e => e.id === coin.id)) {\r\n        let temp = [...coins];\r\n        let index = coins.findIndex(e => e.id === coin.id);\r\n        temp[index].amountOwned += amount;\r\n        setCoins(temp);\r\n      } else {\r\n        coin.amountOwned = amount;\r\n        setCoins(prevState => [...prevState, coin]);\r\n      }\r\n      setMoney(money - Number(coin.price * amount));\r\n      spawnToast(\r\n        `You successfully acquired ${amount} ${coin.id} for $${roundToTwo(\r\n          coin.price * amount\r\n        )}`\r\n      );\r\n    } else {\r\n      spawnToast(\r\n        `You cannot afford to buy ${amount} ${coin.id} due to lack of funds.`,\r\n        'error'\r\n      );\r\n    }\r\n  };\r\n\r\n  const sellCoin = (coin, amount) => {\r\n    let temp = [...coins];\r\n    let index = temp.findIndex(e => e.id === coin.id);\r\n    temp[index].amountOwned = temp[index].amountOwned - amount;\r\n    if (temp[index].amountOwned === 0) temp.splice(index, 1);\r\n    setCoins(temp);\r\n    setMoney(money + Number(coin.price * amount)); // TODO: Fetch new price\r\n    spawnToast(\r\n      `You successfully sold your ${amount} ${coin.id} for $${roundToTwo(\r\n        coin.price * amount\r\n      )}`\r\n    );\r\n  };\r\n\r\n  const sellAllCoins = () => {\r\n    let moneyEarned = calculatePortfolioValue();\r\n    spawnToast(\r\n      `You've launched off to the moon! Earning you $${roundToTwo(\r\n        moneyEarned\r\n      )}!`,\r\n      'success'\r\n    );\r\n    setCoins([]);\r\n    setMoney(money + moneyEarned);\r\n  };\r\n\r\n  const calculatePortfolioValue = () => {\r\n    let value = 0;\r\n    coins.forEach(element => {\r\n      value += element.amountOwned * element.price;\r\n    });\r\n\r\n    return value;\r\n  };\r\n\r\n  const addMoney = () => {\r\n    spawnToast(\r\n      \"YOU'RE BLOODY RICH MATE, WHAT ARE YA GONNA DO WITH ALL THOSE DOLLARYDOOS?\",\r\n      'warning'\r\n    );\r\n    setMoney(money + 100);\r\n  };\r\n\r\n  const canAfford = (coin, amount) => {\r\n    return money > coin.price * amount;\r\n  };\r\n\r\n  const toast = useToast();\r\n  const spawnToast = (description, status, position) => {\r\n    toast({\r\n      description: description,\r\n      status: status,\r\n      position: position,\r\n      duration: 2000,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Box textAlign=\"center\" fontSize=\"xl\">\r\n      <Grid minH=\"100vh\" p={3}>\r\n        <Header />\r\n        <VStack spacing={4}>\r\n          <MarketList\r\n            spawnToast={spawnToast}\r\n            money={money}\r\n            setMoney={setMoney}\r\n            purchaseCoin={purchaseCoin}\r\n          />\r\n          <CoinList spawnToast={spawnToast} coins={coins} sellCoin={sellCoin} />\r\n          <Money money={money} />\r\n          <HStack>\r\n            <MoneyButton addMoney={addMoney} />\r\n            <SellButton\r\n              sellAllCoins={sellAllCoins}\r\n              calculatePortfolioValue={calculatePortfolioValue}\r\n            />\r\n          </HStack>\r\n        </VStack>\r\n        <Footer></Footer>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n","import React from 'react';\nimport {\n  ChakraProvider,\n  theme,\n} from '@chakra-ui/react';\n\nimport { Main } from './components/Main';\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Main />\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}